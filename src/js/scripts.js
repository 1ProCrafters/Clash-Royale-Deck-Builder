let contentToCopy,btn,img,playerInfo,currentDeck=[0,0,0,0,0,0,0,0],selectedContainer=0,id=-1,cardName='',maxDown=0,response=null,userName=null,html='<button title="Remove all" class="btnRemoveAll" onclick="deleteAllBest()">Remove all Decks</button><h2 class="elixir"></h2>';const cardsName=['no-card','witch','skeleton-army','baby-dragon','prince','giant','musketeer','mini-pekka','fireball','knight','archers','minions','arrows','hunter','goblin-barrel','hog-rider','goblin-hut','goblins','spear-goblins','balloon','giant-skeleton','valkyrie','tombstone','skeletons','bomber','golem','barbarian-barrel','battle-ram','barbarian-hut','barbarians','cannon','lava-hound','miner','pekka','lightning','mega-minion','inferno-tower','minion-horde','zap','night-witch','graveyard','freeze','poison','wizard','furnace','fire-spirits','bats','inferno-dragon','the-log','cannon-cart','x-bow','flying-machine','rocket','skeleton-barrel','mortar','princess','royal-ghost','guards','dark-prince','three-musketeers','heal','royal-giant','royal-recruits','ice-wizard','lumberjack','bowler','tornado','ice-golem','elixir-collector','ice-spirit','giant-snowball','bandit','executioner','goblin-giant','dart-goblin','goblin-gang','rascals','ram-rider','mega-knight','magic-archer','rage','royal-hogs','bomb-tower','elite-barbarians','sparky','electro-wizard','electro-dragon','mirror','clone','zappies','tesla'],cardsInformation=['There isn\'t Card selected','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Spell','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Spell','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Spell','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Construction','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Construction','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Spell','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Construction','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Construction','Rarity: Legendary<br />Type: Troop','Rarity: Legendary<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Spell','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Construction','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Spell','Rarity: Legendary<br />Type: Troop','Rarity: Legendary<br />Type: Spell','Rarity: Epic<br />Type: Spell','Rarity: Epic<br />Type: Spell','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Construction','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Troop','Rarity: Legendary<br />Type: Troop','Rarity: Legendary<br />Type: Spell','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Construction','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Spell','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Construction','Rarity: Legendary<br />Type: Troop','Rarity: Legendary<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Spell','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Troop','Rarity: Legendary<br />Type: Troop','Rarity: Legendary<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Spell','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Construction','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Spell','Rarity: Legendary<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Rare<br />Type: Troop','Rarity: Common<br />Type: Troop','Rarity: Common<br />Type: Troop','Rarity: Legendary<br />Type: Troop','Rarity: Legendary<br />Type: Troop','Rarity: Legendary<br />Type: Troop','Rarity: Epic<br />Type: Spell','Rarity: Rare<br />Type: Troop','Rarity: Rare<br />Type: Construction','Rarity: Common<br />Type: Troop','Rarity: Legendary<br />Type: Troop','Rarity: Legendary<br />Type: Troop','Rarity: Epic<br />Type: Troop','Rarity: Epic<br />Type: Spell','Rarity: Epic<br />Type: Spell','Rarity: Rare<br />Type: Troop','Rarity: Common<br />Type: Construction'],cardsElixir=[0,5,3,4,5,5,4,4,4,3,3,3,3,4,3,4,5,2,2,5,6,4,3,1,3,8,2,4,7,5,3,7,3,7,6,3,5,5,2,4,5,4,4,5,4,2,2,4,2,5,6,4,6,3,4,3,3,3,4,9,1,6,7,3,4,5,3,2,6,1,2,3,5,6,3,3,5,5,7,4,2,5,4,6,6,4,5,1.6,3,4,4],cardsCode=[0,26000007,26000012,26000015,26000016,26000003,26000014,26000018,28000000,26000000,26000001,26000005,28000001,26000044,28000004,26000021,27000001,26000002,26000019,26000006,26000020,26000011,27000009,26000010,26000013,26000009,28000015,26000036,27000005,26000008,27000000,26000029,26000032,26000004,28000007,26000039,27000003,26000022,28000008,26000048,28000010,28000005,28000009,26000017,27000010,26000031,26000049,26000037,28000011,26000054,27000008,26000057,28000003,26000056,27000002,26000026,26000050,26000025,26000027,26000028,28000016,26000024,26000047,26000023,26000035,26000034,28000012,26000038,27000007,26000030,28000017,26000046,26000045,26000060,26000040,26000041,26000053,26000051,26000055,26000062,28000002,26000059,27000004,26000043,26000033,26000042,26000063,28000006,28000013,26000052,27000006],cardPtName=['','Bruxa','Ex\xE9rcito de Esqueletos','Beb\xEA Drag\xE3o','Pr\xEDncipe','Gigante','Mosqueteira','Mini P.E.K.K.A','Bola de Fogo','Cavaleiro','Arqueiras','Servos','Flechas','Ca\xE7ador','Barril de Goblins','Corredor','Cabana de Goblins','Goblins','Goblins Lanceiros','Bal\xE3o','Esqueleto Gigante','Valqu\xEDria','L\xE1pide','Esqueletos','Bombardeiro','Golem','Barril de B\xE1rbaro','Ariete de Batalha','Cabana de B\xE1rbaros','B\xE1rbaros','Canh\xE3o','Lava Hound','Mineiro','P.E.K.K.A','Rel\xE2mpago','Megasservo','Torre Inferno','Horda de Servos','Zap','Bruxa Sombria','Cemit\xE9rio','Gelo','Veneno','Mago','Fornalha','Esp\xEDritos de Fogo','Morcegos','Drag\xE3o Infernal','Tronco','Carrinho de Canh\xE3o','X-Besta','M\xE1quina Voadora','Foguete','Barril de Esqueletos','Morteiro','Princesa','Fantasma Real','Guardas','Pr\xEDncipe das Trevas','Tr\xEAs Mosqueteiras','Cura','Gigante Real','Recrutas Reais','Mago de Gelo','Lenhador','Lan\xE7ador','Tornado','Golem de Gelo','Coletor de Elixir','Esp\xEDrito de Gelo','Bola de Neve','Bandida','Executor','Goblin Gigante','Goblin com Dardo','Gangue de Goblins','Patifes','Domadora de Cordeiro','Megacavaleiro','Arqueiro M\xE1gico','F\xFAria','Porcos Reais','Torre de Bombas','B\xE1rbaros de Elite','Sparky','Mago El\xE9trico','Drag\xE3o El\xE9trico','Espelho','Clone','Eletrocutadores','Tesla'],defesa=['Giant','Golem','Royal Giant','Goblin Giant'],towerAttack=['Hog Rider','Battle Ram','Royal Giant','Royal Hogs','Ram Rider'],mainAttack=['Elite Barbarians','Royal Giant','Pekka'],C=['Tombstone','Cannon'],CV3=['Barbarians Hut','Goblin Hut','Furnace'],CA=['Sparky','Giant Skeleton','Mega Knight'],Si=['Mortar','X Bow'],F=['Arrows','Fireball','Poison','Giant Snowball'],FV2=['Lightning','Rocket'],FV3=['Zap','The Log'],FV4=['Rage','Tornado'],Surp=['Miner','Goblin Barrel'],Ciclar=['Skeletons','Goblins','Spear Goblins','Ice Spirit','Fire Spirits','Bats','Ice Golem'],Sup=['Witch','Prince','Mega Knight','Musketeer','Three Musketeers','Night Witch','Bowler','Hunter','Executioner','Cannon Cart','Rascals'],SV2=['Baby Dragon','Mini Pekka','Valkyrie','Inferno Dragon','Electro Wizard','Dark Prince','Lumberjack','Zappies','Flying Machine'],SV3=['Royal Ghost','Magic Archer','Bandit','Princess','Ice Wizard','Skeleton Barrel','Skeleton Army','Knight','Goblin Gang','Guards','Archers'],M=['Minions','Minion Horde','Mega Minion'],tipos=['Three Musketeers|Rascals|Miner|SV3|SV3|Ciclar|FV3|Elixir Collector','Rascals|Pekka|Miner|Poison|Ciclar|FV3|SV3|SV3','Rascals|Goblin Hut|Graveyard|Poison|Ciclar|M|FV3|SV3','Rascals|Prince|Goblin Hut|SV3|SV3|F|FV3|Ciclar','Rascals|Lava Hound|Balloon|M|F|FV3|M|C','Rascals|Miner|Goblin Hut|M|SV3|FV3|SV2|SV3','Three Musketeers|Hog Rider|Royal Ghost|Ciclar|SV2|M|FV3|C','Golem|Prince|Magic Archer|M|SV3|Ciclar|F|FV3','Giant|Magic Archer|Prince|M|SV3|F|SV3|FV3','Magic Archer|Miner|Balloon|Ciclar|Ciclar|FV4|FV3|SV3','Mega Knight|Skeleton Barrel|Ciclar|SV3|SV2|Surp|F|FV3','Mega Knight|Balloon|Miner|Ciclar|Ciclar|M|M|FV3','Mega Knight|Flying Machine|Graveyard|Poison|Ciclar|Ciclar|FV3|SV2','Mega Knight|Giant|F|M|SV3|SV2|FV3|Elixir Collector','Miner|Hunter|Prince|Dark Prince|Ciclar|Ciclar|F|FV3','Miner|Hunter|Ciclar|Ciclar|Ciclar|FV3|SV3|F','Si|Hunter|Ciclar|SV3|FV3|Ciclar|M|F','Golem|Hunter|Night Witch|Ciclar|FV4|F|FV3|SV3','Golem|Zappies|Night Witch|FV3|F|FV3|M|Ciclar','Miner|F|Hunter|Zappies|SV3|FV3|Surp|SV2','Goblin Gang|Zappies|SV3|SV3|FV3|FV2|FV4|SV3','Three Musketeers|Zappies|Ice Wizard|Ciclar|FV4|SV2|FV3|Elixir Collector','D|S|SV2|SV3|Ciclar|Ciclar|FV3|F','Si|Ciclar|Ciclar|SV3|SV2|FV2|FV3|M','Ciclar|AP|FV3|F|S|SV3|FV3|Surp','Battle Ram|Ice Golem|SV2|SV3|F|FV3|Ciclar|Surp','Hog Rider|Mega Knight|Ice Golem|SV2|Ciclar|Ciclar|FV3|F','Inferno Tower|SV3|SV3|Ciclar|SV3|FV2|Surp|FV3','Mega Knight|Ciclar|Surp|SV3|SV2|Ciclar|SV3|FV3','D|Minions|S|SV2|Ciclar|FV3|F|FV3','Pekka|Prince|Dark Prince|Tornado|Ciclar|FV3|F|SV3','Sparky|D|SV2|SV3|Ciclar|F|FV3|Surp','Lava Hound|Balloon|M|M|SV3|Tombstone|F|FV3','SV3|SV3|Ciclar|Hog Rider|Ciclar|C|F|FV3','SV3|SV3|Ciclar|Ciclar|Si|Arrows|FV2|FV3','SV3|SV2|Ciclar|SV3|Mega Knight|SV3|Goblin Hut|FV3','AT|S|SV3|Ciclar|F|FV3|Ciclar|M','D|Elixir Collector|SV2|SV2|SV3|S|FV3|Tornado','Hog Rider|Freeze|S|SV2|SV3|Ciclar|F|FV3','Balloon|FV4|Surp|SV2|SV2|FV3|Ciclar|Ciclar','FV3|D|M|F|SV2|S|Ciclar|SV3','C|SV2|SV3|Surp|Ciclar|F|FV3|AP','D|Sparky|Tornado|SV2|SV3|FV3|Ciclar|FV3','Ice Golem|Graveyard|F|FV3|M|Tombstone|SV3|FV3','Mega Knight|Miner|SV2|Ciclar|SV3|Ciclar|SV3|FV3','Royal Ghost|Mega Knight|SV3|SV2|SV3|Surp|SV3|FV3','Three Musketeers|Elixir Collector|SV3|Ciclar|S|FV3|Surp|SV2','Three Musketeers|Elixir Collector|SV3|Ciclar|S|FV3|Surp|Pekka','CA|Surp|FV3|FV3|FV2|Ciclar|S|SV3','Hog Rider|Inferno Dragon|FV2|FV3|FV4|Ciclar|SV2|Ciclar','Giant|F|SV2|Ciclar|S|FV3|C|Ciclar','Battle Ram|F|FV3|Ciclar|SV2|SV3|SV3|SV2','Balloon|Miner|FV3|SV2|F|Ciclar|M|Tombstone','Si|Ciclar|Ciclar|FV3|FV3|M|SV3|Hog Rider','Miner|Minion Horde|FV3|F|SV3|SV3|Surp|Inferno Tower','Goblin Hut|Surp|SV3|F|SV2|M|FV3|Graveyard','Si|FV3|M|Surp|Ciclar|Ciclar|SV3|SV3'],allowedCards=[],prevDeck=[],createDecks=new Worker('./src/js/render.js'),saveDecks=new Worker('./src/js/save.js'),deleteDecks=new Worker('./src/js/delete.js'),cards=document.querySelectorAll('.cardsContainer img'),info=document.querySelector('.infoContainer h2'),dbSection=document.querySelector('.builderSection'),aboutSection=document.querySelector('.aboutSection'),savedSection=document.querySelector('.savedSection'),savedDecks=document.querySelector('.savedSection section'),selectSection=document.querySelector('.selectSection'),configSection=document.querySelector('.configSection'),bestSection=document.querySelector('.bestSection'),playerSection=document.querySelector('.playerSection'),chestSection=document.querySelector('.chestSection'),bestDecks=document.querySelector('.bestSection section'),mediaComponent=document.querySelector('#elixirMedio'),ddArena=document.querySelector('#ddArena'),ddRarity=document.querySelector('#ddRarity'),ddType=document.querySelector('#ddType'),btnCopy=document.querySelector('#copy'),changeContainers=document.querySelectorAll('.navSection button'),chestContainer=document.querySelector('.chestContainer'),navSection=document.querySelector('.navSection'),cbConfigs=document.querySelectorAll('.configSection input'),cbDeckInteligente=document.querySelector('#smartDeck'),btnVoltar=document.querySelector('.btnVoltar'),chkConfig=document.querySelectorAll('.config input'),chkConfigText=document.querySelectorAll('.config label'),playerRing=document.querySelector('.player-ring'),chestRing=document.querySelector('.chest-ring'),bestRing=document.querySelector('.best-ring'),idUser=document.querySelector('#idUser'),idPlayer=document.querySelector('#idPlayer'),cntConfig=document.querySelector('.containerConfig'),btnMore=document.querySelector('.btnCenter'),arenas=[91,91,84,77,71,63,55,47,39,31,25,19,13],root=document.querySelector(':root'),minWidth=matchMedia('(min-width: 768px)'),maxWidth=matchMedia('(max-width: 767px)'),cont=[dbSection,playerSection,selectSection,savedSection,bestSection,chestSection,configSection,aboutSection],apiKey='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTk3MiwiaWRlbiI6IjMxOTkwNTQwNjg4NzY1NzQ4MiIsIm1kIjp7InVzZXJuYW1lIjoiTHVjYXMgTmFqYSIsImtleVZlcnNpb24iOjMsImRpc2NyaW1pbmF0b3IiOiI4MDE0In0sInRzIjoxNTQ1ODY3Mjg5ODIyfQ.NCSnyJtAk6kcZMpXxtLGfiSuii5NpVm43ls9QGxG0mc';null!==localStorage.getItem('ddArena')&&(ddArena.selectedIndex=localStorage.getItem('ddArena')),null!==localStorage.getItem('ddRarity')&&(ddRarity.selectedIndex=localStorage.getItem('ddRarity')),null!==localStorage.getItem('ddType')&&(ddType.selectedIndex=localStorage.getItem('ddType')),chkConfig[0].onchange=()=>{if(chkConfig[0].checked)for(let c=1;c<cardsName.length;c++)img[c-1].removeAttribute('class'),localStorage.setItem(cardsName[c],'e');else for(let c=1;c<cardsName.length;c++)img[c-1].setAttribute('class','notAllowed'),localStorage.setItem(cardsName[c],'d');changeDeck()};function changeAble(c,d,g,h){if(chkConfig[c].checked)for(let l=1;l<cardsName.length;l++)`${g}: ${h}`===cardsInformation[l].split('<br />')[d]&&(img[l-1].removeAttribute('class'),localStorage.setItem(cardsName[l],'e'));else for(let l=1;l<cardsName.length;l++)`${g}: ${h}`===cardsInformation[l].split('<br />')[d]&&(img[l-1].setAttribute('class','notAllowed'),localStorage.setItem(cardsName[l],'d'));changeDeck()}const rarity=['Common','Rare','Epic','Legendary','Troop','Spell','Construction'];for(let c=1;c<chkConfig.length;c++)chkConfig[c].onchange=()=>{changeAble(c,4>c-1?0:1,4>c-1?'Rarity':'Type',rarity[c-1])};function changeDeck(){const c=arenas[ddArena.selectedIndex];let d=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;allowedCards.splice(0,allowedCards.length);for(let z=1;z<c;z++)0===ddRarity.selectedIndex?allowedCards.push(z):1===ddRarity.selectedIndex&&'Rarity: Common'===cardsInformation[z].split('<br />')[0]?allowedCards.push(z):2===ddRarity.selectedIndex&&'Rarity: Rare'===cardsInformation[z].split('<br />')[0]?allowedCards.push(z):3===ddRarity.selectedIndex&&'Rarity: Epic'===cardsInformation[z].split('<br />')[0]?allowedCards.push(z):4===ddRarity.selectedIndex&&'Rarity: Legendary'===cardsInformation[z].split('<br />')[0]&&allowedCards.push(z);for(let z=0;z<allowedCards.length;z++)1===ddType.selectedIndex&&'Type: Troop'!==cardsInformation[allowedCards[z]].split('<br />')[1]?allowedCards[z]=0:2===ddType.selectedIndex&&'Type: Construction'!==cardsInformation[allowedCards[z]].split('<br />')[1]?allowedCards[z]=0:3===ddType.selectedIndex&&'Type: Spell'!==cardsInformation[allowedCards[z]].split('<br />')[1]&&(allowedCards[z]=0);for(let z=0;z<allowedCards.length;z++)0!==allowedCards[z]&&'e'!==localStorage.getItem(cardsName[allowedCards[z]])&&(allowedCards[z]=0);for(let z=1;z<cardsName.length;z++)q++,'Rarity: Common'===cardsInformation[z].split('<br />')[0]&&r++,'Rarity: Rare'===cardsInformation[z].split('<br />')[0]&&s++,'Rarity: Epic'===cardsInformation[z].split('<br />')[0]&&t++,'Rarity: Legendary'===cardsInformation[z].split('<br />')[0]&&u++,'Type: Troop'===cardsInformation[z].split('<br />')[1]&&v++,'Type: Spell'===cardsInformation[z].split('<br />')[1]&&w++,'Type: Construction'===cardsInformation[z].split('<br />')[1]&&x++,'e'===localStorage.getItem(cardsName[z])&&(d++,'Rarity: Common'===cardsInformation[z].split('<br />')[0]&&g++,'Rarity: Rare'===cardsInformation[z].split('<br />')[0]&&h++,'Rarity: Epic'===cardsInformation[z].split('<br />')[0]&&l++,'Rarity: Legendary'===cardsInformation[z].split('<br />')[0]&&m++,'Type: Troop'===cardsInformation[z].split('<br />')[1]&&n++,'Type: Spell'===cardsInformation[z].split('<br />')[1]&&o++,'Type: Construction'===cardsInformation[z].split('<br />')[1]&&p++);for(chkConfigText[0].textContent=`All Cards => ${d}`,chkConfigText[1].textContent=`All Common Cards => ${g}`,chkConfigText[2].textContent=`All Rare Cards => ${h}`,chkConfigText[3].textContent=`All Epic Cards => ${l}`,chkConfigText[4].textContent=`All Legendary Cards => ${m}`,chkConfigText[5].textContent=`All Troop Cards => ${n}`,chkConfigText[6].textContent=`All Spell Cards => ${o}`,chkConfigText[7].textContent=`All Construction Cards => ${p}`,chkConfig[0].checked=d==q,chkConfig[1].checked=g==r,chkConfig[2].checked=h==s,chkConfig[3].checked=l==t,chkConfig[4].checked=m==u,chkConfig[5].checked=n==v,chkConfig[6].checked=o==w,chkConfig[7].checked=p==x,document.querySelector('.selectSection h2').textContent=`Amount of allowed Cards: ${d}`;-1!==allowedCards.indexOf(0);)for(let z=0;z<allowedCards.length;z++)0===allowedCards[z]&&allowedCards.splice(z,1)}ddArena.onchange=()=>{changeDeck(),localStorage.setItem('ddArena',ddArena.selectedIndex)},ddRarity.onchange=()=>{changeDeck(),localStorage.setItem('ddRarity',ddRarity.selectedIndex)},ddType.onchange=()=>{changeDeck(),localStorage.setItem('ddType',ddType.selectedIndex)},cbDeckInteligente.onchange=()=>{!0===cbDeckInteligente.checked?(ddArena.disabled=!0,ddRarity.disabled=!0,ddType.disabled=!0,1<prevDeck.length&&(btnVoltar.hidden=!1)):(ddArena.disabled=!1,ddRarity.disabled=!1,ddType.disabled=!1,1<prevDeck.length&&(btnVoltar.hidden=!0))};function allowDrag(c){c.preventDefault()}function getId(c){c.stopPropagation(),id=parseInt(c.target.id)}function pasteCard(c){if(c.preventDefault(),-1!==id){let d=currentDeck[id];currentDeck[id]=currentDeck[parseInt(c.target.id)],currentDeck[parseInt(c.target.id)]=d,setDeck(currentDeck),id=-1}}function capitalize(c){return c.split('-').map(d=>d.charAt(0).toUpperCase()+d.slice(1)).join(' ')}function setDeck(c=Array){let d=0;contentToCopy='deck=';for(let g=0;g<c.length;g++)contentToCopy+=cardsCode[c[g]]+(g===c.length-1?'':';'),cards[g].src=`./images/cards/${cardsName[c[g]]}_opt-min.png`,cards[g].alt=cardsName[c[g]],cards[g].title=capitalize(cardsName[c[g]]),d+=cardsElixir[c[g]]/8;mediaComponent.textContent=`Elixir average: ${d.toFixed(1)}`;for(let g=c.length;8>g;g++)currentDeck.push(0),cards[g].src='./images/cards/no-card_opt-min.png',cards[g].alt='No Card',cards[g].title='No Card'}function buildDeck(){if(currentDeck.splice(0,currentDeck.length),cbDeckInteligente.checked){const c=tipos[parseInt(Math.random()*tipos.length)],d=[defesa,Sup,mainAttack,FV3,Si,F,FV2,C,SV2,SV3,M,towerAttack,Surp,Ciclar,CV3,FV4,CA],g=['D','S','AP','FV3','Si','F','FV2','C','SV2','SV3','M','AT','Surp','Ciclar','CV3','FV4','CA'];for(let h=0;h<c.split('|').length;h++)for(let l=0;l<g.length;l++)if(c.split('|')[h]===g[l]){let m=d[l][parseInt(Math.random()*d[l].length)];for(;-1!==currentDeck.indexOf(m);)m=d[l][parseInt(Math.random()*d[l].length)];currentDeck.push(m);break}else l===g.length-1&&currentDeck.push(c.split('|')[h]);for(let h=0;h<currentDeck.length;h++)for(let l=1;l<cardsInformation.length;l++)currentDeck[h]===capitalize(cardsName[l])&&(currentDeck[h]=l);randomizeDeck(),prevDeck.push([]);for(let h=0;h<currentDeck.length;h++)prevDeck[prevDeck.length-1].push(currentDeck[h]);100<prevDeck.length?prevDeck.shift():1<prevDeck.length&&(btnVoltar.hidden=!1)}else{1===prevDeck.length&&prevDeck.pop();let c=allowedCards[parseInt(Math.random()*allowedCards.length)];for(let d=0;d<(8>allowedCards.length?allowedCards.length:cards.length);d++){for(;-1!==currentDeck.indexOf(c);)c=allowedCards[parseInt(Math.random()*allowedCards.length)];currentDeck.push(c)}}setDeck(currentDeck)}function switchContainer(c=dbSection){for(let d=0;d<cont.length;d++)cont[d]===c?(changeContainers[d].setAttribute('id','selectedButton'),changeContainers[d].style.color='var(--textColor)',cont[d].style.display='block',selectedContainer=d):(changeContainers[d].removeAttribute('id'),changeContainers[d].style.color='var(--buttonTextColor)',cont[d].style.display='none')}function combination(){const c=allowedCards.length,d=8>allowedCards.length?allowedCards:8;let g=0,h=1,l=1;for(let n=c;n>c-d;n--)h*=n;for(let n=d;0<n;n--)l*=n;g=h/l;const m=Intl.NumberFormat('en-US');return 0===allowedCards.length?0:m.format(g)}function infoCards(){alert((1024>window.innerWidth?'To change any Card, simply press and hold a Card.\nTo remove the current Deck, simply press and hold the Paste Deck button.\nTo shuffle the current Deck, simply press and hold the Build Deck button.\nThe function Previous Deck is only valid for smart Decks.\nTo make the site link a direct link to Deck, simply press and hold the Open Deck button.':'To change any Card, simply press right click on Card.\nTo remove current Deck, simply press right click on Paste Deck button.\nTo shuffle current Deck, simply press right click on Build Deck button.\nTo make the site link to direct Deck link, simply press right click on Build Deck button.')+(cbDeckInteligente.checked?'\nCard selector, dropdowns of arenas, rarities and types only works when smart Deck are deactived.':`\nAmount of Cards to generate: ${allowedCards.length}\nPossible Deck combinations: ${combination()}`))}function copyDeck(){0<prevDeck.length&&prevDeck.pop(),1024>innerWidth?`clashroyale://copyDeck?${contentToCopy}`.split('deck=')[1].split(';').some(c=>'0'===c)?alert('Open links with missing Cards is not allowed'):confirm('Do you wanna open this Deck on Clash Royale game?')&&openDeck(`clashroyale://copyDeck?${contentToCopy}`,'_self'):openDeck(`https://link.clashroyale.com/deck/pt?${contentToCopy}`)}function openDeck(c){c.split('deck=')[1].split(';').some(d=>'0'===d)?alert('Open links with missing Cards is not allowed'):open(c)}function openLink(c){open(c)}function copyDeckSec(){confirm('Do you wanna create a shareable link?')&&(location.search=`deck=${contentToCopy.split('deck=')[1]}`)}function copyDeckPhone(c){confirm('Do you wanna create a shareable link?')&&(location.search=`deck=${c}`)}function copyDeckSaved(c){confirm('Do you wanna open this Deck on Clash Royale game?')&&openDeck(`clashroyale://copyDeck?deck=${c}`)}function paste(c=String){const d=currentDeck.map(g=>g);if(null!==c&&-1===c.trim().indexOf(' ')&&-1!==c.indexOf(';'))try{c.match(/&id=/)&&(c=c.substring(0,c.lastIndexOf('&'))),c.match(/\?deck=/)?(c=c.split('?deck='),c.shift(),c=c.join().split(';')):c=c.split(';');for(let g=0;g<c.length;g++)for(let h=0;h<cardsCode.length;h++)parseInt(c[g])===cardsCode[h]&&(c[g]=h);for(let g=c;8>g;g++)c.push(0);currentDeck=c.map(g=>parseInt(g)),setDeck(currentDeck)}catch(g){currentDeck=d.map(h=>h),setDeck(currentDeck),alert('Invalid Deck link!')}}function pasteDeck(c=null){if(null===c){let d=prompt('Paste a Deck link below\nE.g: https://link.clashroyale.com/deck/en?deck=26000018;28000009;26000003;28000008...');paste(d)}else paste(c)}function formatText(c){const d='aaaaeeeeiiiioooouuuu',g='\xE1\xE2\xE0\xE3\xE9\xEA\xE8\u1EBD\xED\xEC\xEE\u0129\xF3\xF4\xF2\xF5\xFA\xFB\xF9\u0169';c=c.replace(/[!@#$%&*()-=_+'"[\]{},.<>;:/?^~]/g,'');for(let h=0;h<d.length;h++)for(;-1!==c.indexOf(g[h]);)c=c.replace(g[h],d[h]);return c.trim().toLowerCase()}function previousDeck(){for(let c=0;c<currentDeck.length;c++)currentDeck[c]=prevDeck[prevDeck.length-2][c];prevDeck.pop(),setDeck(currentDeck),1>=prevDeck.length&&(btnVoltar.hidden=!0)}function randomizeDeck(){if(-1===currentDeck.indexOf(0)){const c=[];let d=currentDeck[parseInt(Math.random()*currentDeck.length)];for(let g=0;g<currentDeck.length;g++){for(;-1!==c.indexOf(d);)d=currentDeck[parseInt(Math.random()*currentDeck.length)];c.push(d)}for(let g=0;g<c.length;g++)currentDeck[g]=c[g];setDeck(currentDeck)}else alert('Shuffling Deck with missing Cards is not allowed.')}function showSections(c){c.stopPropagation(),'100%'===navSection.style.width?(navSection.style.overflowY='hidden',navSection.style.width='40px',navSection.style.height='35px',0===selectedContainer?dbSection.style.display='block':1===selectedContainer?playerSection.style.display='block':2===selectedContainer?selectSection.style.display='block':3===selectedContainer?savedSection.style.display='block':4===selectedContainer?bestSection.style.display='block':5===selectedContainer?chestSection.style.display='block':6===selectedContainer?configSection.style.display='block':aboutSection.style.display='block'):(navSection.style.overflowY='auto',navSection.style.width='100%',navSection.style.height='100%',0===selectedContainer?dbSection.style.display='none':1===selectedContainer?playerSection.style.display='none':2===selectedContainer?selectSection.style.display='none':3===selectedContainer?savedSection.style.display='none':4===selectedContainer?bestSection.style.display='none':5===selectedContainer?chestSection.style.display='none':6===selectedContainer?configSection.style.display='none':aboutSection.style.display='none')}function closeNav(c){c.stopPropagation(),'100%'===navSection.style.width&&(navSection.style.overflowY='hidden',navSection.style.width='40px',navSection.style.height='35px')}async function downDecks(){null==response&&(bestRing.style.display='block',response=await fetch('https://docs.royaleapi.com/json/popular_decks.json').then(c=>c.json()).catch(()=>alert('An error occurred, please come back later.')));for(let c=maxDown;c<maxDown+(maxDown+10>response.length?response.length-maxDown:10);c++)html+=`
				<section class="cardsContainerS">
					<div><img src="./images/cards/${response[c].cards[0].key}_opt-min.png" alt="${response[c].cards[0].key}" title="${capitalize(response[c].cards[0].key)}" onclick="showInfo(${cardsCode.indexOf(response[c].cards[0].id)})"/></div>
					<div><img src="./images/cards/${response[c].cards[1].key}_opt-min.png" alt="${response[c].cards[1].key}" title="${capitalize(response[c].cards[1].key)}" onclick="showInfo(${cardsCode.indexOf(response[c].cards[1].id)})"/></div>
					<div><img src="./images/cards/${response[c].cards[2].key}_opt-min.png" alt="${response[c].cards[2].key}" title="${capitalize(response[c].cards[2].key)}" onclick="showInfo(${cardsCode.indexOf(response[c].cards[2].id)})"/></div>
					<div><img src="./images/cards/${response[c].cards[3].key}_opt-min.png" alt="${response[c].cards[3].key}" title="${capitalize(response[c].cards[3].key)}" onclick="showInfo(${cardsCode.indexOf(response[c].cards[3].id)})"/></div>
					<div><img src="./images/cards/${response[c].cards[4].key}_opt-min.png" alt="${response[c].cards[4].key}" title="${capitalize(response[c].cards[4].key)}" onclick="showInfo(${cardsCode.indexOf(response[c].cards[4].id)})"/></div>
					<div><img src="./images/cards/${response[c].cards[5].key}_opt-min.png" alt="${response[c].cards[5].key}" title="${capitalize(response[c].cards[5].key)}" onclick="showInfo(${cardsCode.indexOf(response[c].cards[5].id)})"/></div>
					<div><img src="./images/cards/${response[c].cards[6].key}_opt-min.png" alt="${response[c].cards[6].key}" title="${capitalize(response[c].cards[6].key)}" onclick="showInfo(${cardsCode.indexOf(response[c].cards[6].id)})"/></div>
					<div><img src="./images/cards/${response[c].cards[7].key}_opt-min.png" alt="${response[c].cards[7].key}" title="${capitalize(response[c].cards[7].key)}" onclick="showInfo(${cardsCode.indexOf(response[c].cards[7].id)})"/></div>
				</section>
				<h1 class="elixir">Elixir average: ${((response[c].cards[0].elixir+response[c].cards[1].elixir+response[c].cards[2].elixir+response[c].cards[3].elixir+response[c].cards[4].elixir+response[c].cards[5].elixir+response[c].cards[6].elixir+response[c].cards[7].elixir)/8).toFixed(1)}</h1>
				<section class="configContainerS" oncontextmenu="(event => event.preventDefault())(event)">
					<button class="btnCopiarS" title="Open Deck" oncontextmenu="copyDeckPhone('${response[c].cards.map(d=>d.id).join(';')}')" ${1024>innerWidth?`onclick="copyDeckSaved('${response[c].decklink.split('?deck=')[1]}')"`:`onclick="openDeck('${response[c].decklink}')"`}>Open Deck</button>
					<button class="btnApagar" title="Save Deck" onclick="saveDeck([${cardsCode.indexOf(response[c].cards[0].id)},${cardsCode.indexOf(response[c].cards[1].id)},${cardsCode.indexOf(response[c].cards[2].id)},${cardsCode.indexOf(response[c].cards[3].id)},${cardsCode.indexOf(response[c].cards[4].id)},${cardsCode.indexOf(response[c].cards[5].id)},${cardsCode.indexOf(response[c].cards[6].id)},${cardsCode.indexOf(response[c].cards[7].id)}])">Save Deck</button>
					<button class="btnColarS" title="Paste Deck" onclick="pasteDeck('${response[c].decklink}')">Paste Deck</button>
				</section>
			`;bestDecks.innerHTML=html,document.querySelector('.bestSection .upArrow').style.display='block',maxDown+=maxDown+10>response.length?response.length-maxDown:10,0==(maxDown+10>response.length?response.length-maxDown:10)?btnMore.style.display='none':btnMore.textContent=`Show more ${maxDown+10>response.length?response.length-maxDown:10} Decks`,document.querySelector('.bestSection h2').innerText=`Amount of best Decks: ${maxDown}`,bestRing.style.display='none'}function toTop(){let c=scrollY;const d=setInterval(()=>{100<=c?scrollTo(0,c-=100*(scrollY/1e3)):(scrollTo(0,0),clearInterval(d))},1)}(function(){let d='';for(let g=1;g<cardsInformation.length;g++)null===localStorage.getItem(cardsName[g])&&localStorage.setItem(cardsName[g],'e');for(let g=1;g<cardsInformation.length;g++)d+=`
			<section class="cardContainer">
				<img class="${'e'===localStorage.getItem(cardsName[g])?'':'notAllowed'}" src="./images/cards/${cardsName[g]}_opt-min.png" alt="${cardsName[g]}" title="${capitalize(cardsName[g])}" />				
			</section>
		`;selectSection.innerHTML+=`
		${d}
		<img title="To top" onclick="toTop()" src="./images/uparrow.png" class="upArrow"/>
	`,btn=document.querySelectorAll('.selectSection div button'),img=document.querySelectorAll('.selectSection img:not(#configCards):not(.upArrow)'),btn[0].addEventListener('click',()=>{for(let g=1;g<cardsName.length;g++)'d'===localStorage.getItem(cardsName[g])&&(localStorage.setItem(cardsName[g],'e'),img[g-1].removeAttribute('class'));changeDeck()}),btn[1].addEventListener('click',()=>{for(let g=1;g<cardsName.length;g++)'e'===localStorage.getItem(cardsName[g])&&(localStorage.setItem(cardsName[g],'d'),img[g-1].setAttribute('class','notAllowed'));changeDeck()});for(let g=0;g<img.length;g++)img[g].addEventListener('click',function(){'notAllowed'===img[g].className?(img[g].removeAttribute('class'),localStorage.setItem(cardsName[g+1],'e')):(img[g].setAttribute('class','notAllowed'),localStorage.setItem(cardsName[g+1],'d')),changeDeck()})})(),createDecks.onmessage=c=>{savedDecks.innerHTML=`
		${c.data.html}
		${5<c.data.amount?'<img style="margin-top: 5px" title="To top" onclick="toTop()" src="./images/uparrow.png" class="upArrow"/>':''}
	`,document.querySelector('.savedSection h2').innerText=`Amount of saved Decks: ${JSON.parse(localStorage.getItem('decks')).deckList.length}`},saveDecks.onmessage=c=>{c.data.exists?alert('Deck is already saved.'):(localStorage.setItem('decks',c.data.deck),render())},deleteDecks.onmessage=c=>{'empty'===c.data?localStorage.removeItem('decks'):localStorage.setItem('decks',`{"deckList": ${c.data}}`),render()};function render(){null!==localStorage.getItem('decks')&&0<JSON.parse(localStorage.getItem('decks')).deckList.length?createDecks.postMessage({decks:JSON.parse(localStorage.getItem('decks')).deckList,cardsName:cardsName,cardsElixir:cardsElixir,cardsCode:cardsCode,screenSize:innerWidth}):savedDecks.innerHTML='<h2 class="noneDeck">There isn\'t Deck saved</h2><button title="Save Decks now!" onclick="closeNav(event); switchContainer(); if (history.state !== 0 && history.state !== null) history.pushState(0, \'changed\')" class="btnCenter">Save Decks now!</button>'}function saveDeck(c=currentDeck){let d=-1!==c.indexOf(0),g=null!==localStorage.getItem('decks')&&99<JSON.parse(localStorage.getItem('decks')).deckList.length;d||g?d?alert('Saving Deck with missing cards is not allowed.'):alert('Saving more than 100 Decks is not allowed.'):saveDecks.postMessage({decks:JSON.parse(localStorage.getItem('decks')),currentDeck:c})}function deleteDeck(c=Array){confirm('Do you wanna remove this Deck?')&&deleteDecks.postMessage({deckList:JSON.parse(localStorage.getItem('decks')).deckList,deck:c})}function deleteAll(){confirm('Do you wanna remove all saved Decks?')&&(localStorage.removeItem('decks'),render())}function deleteAllBest(){confirm('Do you wanna remove all best Decks?')&&(response=null,html='<button title="Remove all" class="btnRemoveAll" onclick="deleteAllBest()">Remove all Decks</button><h2 class="elixir"></h2>',bestDecks.innerHTML='<h2 class="noneDeck">There isn\'t Deck here</h2>',document.querySelector('.bestSection .upArrow').style.display='none',btnMore.style.display='block',btnMore.textContent='Show more 10 Decks',maxDown=0)}function showInfo(c=Number){const d=['Training Camp','Goblin Stadium','Bone Pit','Barbarian Bowl','P.E.K.K.A\'s Playhouse','Spell Valley','Builder\'s Workshop','Royal Arena','Frozen Peak','Jungle Arena','Hog Mountain','Electro Valley'],g=(()=>{for(let h=0;h<arenas.length;h++)if(c<(0===h?13:arenas[arenas.length-h]))return h})();info.innerHTML=`<ins>${capitalize(cardsName[c])}</ins><br />${cardsInformation[c]}<br />Elixir cost: ${cardsElixir[c]}<br />Arena: ${0===g?d[g]:`${d[g]} (${g})`}`}function showChests(){const c=document.querySelector('#showChests');chestRing.style.display='block',c.disabled=!0,chestContainer.innerHTML='',fetch(`https://api.royaleapi.com/player/${idUser.value.trim().replace('#','')}/chests`,{async:!0,crossDomain:!0,method:'GET',headers:{auth:apiKey}}).then(g=>g.json()).then(g=>{null===localStorage.getItem('id')&&localStorage.setItem('id',idUser.value.trim()),c.textContent='Refresh',c.setAttribute('title','Refresh next Chests');let h=`${null==userName?'':idUser.value.trim().replace('#','')===idPlayer.value.trim().replace('#','')?`<h2 class="elixir">Next Chests of ${userName}</h2>`:''}`;const l=[];for(let m=0;m<g.upcoming.length;m++)h+=`
				<section class="chestInfo">
					<img class="notPointer" title="${capitalize(g.upcoming[m])} Chest" alt="${g.upcoming[m]}" src="../images/chests/${g.upcoming[m]}.png" />
					<p>${0===m?'Next':'+'+m}</p>
				</section>
			`;for(let m in g)'upcoming'!==m&&l.push([m,g[m]]);l.sort((m,n)=>m[1]-n[1]);for(let m=0;m<l.length;m++)9>l[m][1]||(h+=`
				<div class="chestInfo">
					<img class="notPointer" title="${capitalize(l[m][0])} Chest" alt="${l[m][0]}" src="../images/chests/${l[m][0]}.png" />
					<p>+${l[m][1]}</p>
				</div>
			`);chestContainer.innerHTML=h,chestRing.style.display='none',c.disabled=!1}).catch(g=>{console.log(g),c.disabled=!1,c.textContent='Show',c.setAttribute('title','Show next Chests'),chestRing.style.display='none'})}function login(c=idPlayer.value.trim().replace('#','')){const d=document.querySelector('#showPlayer');d.disabled=!0,document.querySelector('.playerContainer').innerHTML='',playerRing.style.display='block',fetch(`https://api.royaleapi.com/player/${c}`,{async:!0,crossDomain:!0,method:'GET',headers:{auth:apiKey}}).then(h=>h.json()).then(h=>{playerInfo=h.cards,userName=h.name,d.textContent='Refresh',d.setAttribute('title','Refresh login');const l=`
			<h2 class="elixir">Current Deck</h2>
			<section class="cardsContainerS">
				<div><img src="./images/cards/${h.currentDeck[0].key}_opt-min.png" alt="${h.currentDeck[0].key}" title="${capitalize(h.currentDeck[0].key)}" onclick="showInfo(${cardsCode.indexOf(h.currentDeck[0].id)})"/></div>
				<div><img src="./images/cards/${h.currentDeck[1].key}_opt-min.png" alt="${h.currentDeck[1].key}" title="${capitalize(h.currentDeck[1].key)}" onclick="showInfo(${cardsCode.indexOf(h.currentDeck[1].id)})"/></div>
				<div><img src="./images/cards/${h.currentDeck[2].key}_opt-min.png" alt="${h.currentDeck[2].key}" title="${capitalize(h.currentDeck[2].key)}" onclick="showInfo(${cardsCode.indexOf(h.currentDeck[2].id)})"/></div>
				<div><img src="./images/cards/${h.currentDeck[3].key}_opt-min.png" alt="${h.currentDeck[3].key}" title="${capitalize(h.currentDeck[3].key)}" onclick="showInfo(${cardsCode.indexOf(h.currentDeck[3].id)})"/></div>
				<div><img src="./images/cards/${h.currentDeck[4].key}_opt-min.png" alt="${h.currentDeck[4].key}" title="${capitalize(h.currentDeck[4].key)}" onclick="showInfo(${cardsCode.indexOf(h.currentDeck[4].id)})"/></div>
				<div><img src="./images/cards/${h.currentDeck[5].key}_opt-min.png" alt="${h.currentDeck[5].key}" title="${capitalize(h.currentDeck[5].key)}" onclick="showInfo(${cardsCode.indexOf(h.currentDeck[5].id)})"/></div>
				<div><img src="./images/cards/${h.currentDeck[6]===void 0?'no-card':h.currentDeck[6].key}_opt-min.png" alt="${h.currentDeck[6]===void 0?'No Card':h.currentDeck[6].key}" title="${h.currentDeck[6]===void 0?'No Card':capitalize(h.currentDeck[6].key)}" onclick="if(${h.currentDeck[6]===void 0}) info.innerText = 'There isn\'t Card selected'; else showInfo(cardsCode.indexOf(${h.currentDeck[6]===void 0?0:h.currentDeck[7].id}))"/></div>
				<div><img src="./images/cards/${h.currentDeck[7]===void 0?'no-card':h.currentDeck[7].key}_opt-min.png" alt="${h.currentDeck[7]===void 0?'No Card':h.currentDeck[7].key}" title="${h.currentDeck[7]===void 0?'No Card':capitalize(h.currentDeck[7].key)}" onclick="if(${h.currentDeck[7]===void 0}) info.innerText = 'There isn\'t Card selected'; else showInfo(cardsCode.indexOf(${h.currentDeck[7]===void 0?0:h.currentDeck[7].id}))"/></div>
			</section>
			<h1 class="elixir">Elixir average: ${((h.currentDeck[0].elixir+h.currentDeck[1].elixir+h.currentDeck[2].elixir+h.currentDeck[3].elixir+h.currentDeck[4].elixir+h.currentDeck[5].elixir+(h.currentDeck[6]===void 0?0:h.currentDeck[6].elixir)+(h.currentDeck[6]===void 0?0:h.currentDeck[7].elixir))/8).toFixed(1)}</h1>
			<section class="configContainerS" oncontextmenu="(event => event.preventDefault())(event)">
				<button class="btnCopiarS" title="Open Deck" ${1024>innerWidth?`onclick="copyDeckSaved('${h.deckLink.split('deck=')[1]}')"`:`onclick="openDeck('https://link.clashroyale.com/deck/pt?deck=${h.deckLink.split('deck=')[1]}')"`} oncontextmenu="copyDeckPhone('${h.deckLink.split('deck=')[1]}')">Open Deck</button>
				<button class="btnApagar" title="Save Deck" onclick="saveDeck([${h.deckLink.split('deck=')[1].split(';').map(m=>cardsCode.indexOf(parseInt(m))).join(',')}])">Save Deck</button>
				<button class="btnColarS" title="Paste Deck" onclick="pasteDeck('https://link.clashroyale.com/deck/pt?deck=${h.deckLink.split('deck=')[1]}')">Paste Deck</button>
			</section>
			<section class="information">
				<h2 class="elixir">${''===userName?'I':'s'===userName[h.name.length-1]?`${capitalize(userName)} i`:`${capitalize(userName)}'s i`}nformation</h2>
				<table>
					<tr><th>Trophies</th></tr>
					<tr><td>${h.trophies}</td></tr>
				</table>
				${null===h.rank?'':`
					<table>
						<tr><th>World rank</th></tr>
						<tr><td>${h.rank}</td></tr>
					</table>`}
				<table>
					<tr><th>Max trophies</th></tr>
					<tr><td>${h.stats.maxTrophies}</td></tr>
				</table>
				<table>
					<tr><th>Arena name</th></tr>
					<tr><td>${h.arena.name}</td></tr>
				</table>
				<table>
					<tr><th>Arena</th></tr>
					<tr><td>${h.arena.arena}</td></tr>
				</table>
				${null===h.clan?'':`
					<table>
						<tr><th>Clan</th></tr>
						<tr><td>${capitalize(h.clan.name)}</td></tr>
					</table>
					<table>
						<tr><th>Role</th></tr>
						<tr><td>${capitalize(h.clan.role)}</td></tr>
					</table>
					<table>
						<tr><th>Donation</th></tr>
						<tr><td>${h.clan.donations}</td></tr>
					</table>
					<table>
						<tr><th>Received donations</th></tr>
						<tr><td>${h.clan.donationsReceived}</td></tr>
					</table>
					<table>
						<tr><th>Total donation</th></tr>
						<tr><td>${h.stats.totalDonations}</td></tr>
					</table>
				`}	
				${null===h.stats.favoriteCard?'':`
					<table>
						<tr><th>Favorite Card</th></tr>
						<tr><td>${h.stats.favoriteCard.name}</td></tr>
					</table>`}		
				<table>
					<tr><th>Level</th></tr>
					<tr><td>${h.stats.level}</td></tr>
				</table>
				<table>
					<tr><th>Game matches</th></tr>
					<tr><td>${h.games.total}</td></tr>
				</table>		
			</section>
		`;document.querySelector('.playerContainer').innerHTML=l,d.disabled=!1,idUser.value=c,playerRing.style.display='none',localStorage.setItem('id',c),showChests()}).catch(h=>{console.log(h),d.textContent='Show',d.setAttribute('title','Show'),d.disabled=!1,playerRing.style.display='none'})}function basedCards(){if(!(null!==localStorage.getItem('id')))showConfig(),closeNav(event),switchContainer(playerSection),idPlayer.select(),history.pushState(1,'changed');else if(null!==playerInfo){try{if(playerInfo.length===cardsName.length-1)for(let c=0;c<img.length;c++)img[c].removeAttribute('class'),localStorage.setItem(cardsName[c+1],'e');else{const c=[];for(let d in playerInfo)c.push(playerInfo[d].key);for(let d=1;d<cardsName.length;d++)-1===c.indexOf(cardsName[d])?(img[d-1].setAttribute('class','notAllowed'),localStorage.setItem(cardsName[d],'d')):(img[d-1].removeAttribute('class'),localStorage.setItem(cardsName[d],'e'))}}catch(c){basedCards()}changeDeck()}}for(let c=1;c<cardsName.length;c++)cardName+=`<option value="${capitalize(cardsName[c])}"></option>`;document.querySelector('#cardsName').innerHTML=cardName,document.querySelector('#searchCard').setAttribute('list','cardsName'),document.querySelector('#searchCard').onkeypress=c=>{if(13===c.which){const d=formatText(document.querySelector('#searchCard').value.trim().toLowerCase());for(let g=1;g<cardsName.length;g++)if(d===cardsName[g].split('-').map(h=>h).join(' ').toLowerCase()||d===formatText(cardPtName[g].toLowerCase())){document.querySelector('#searchCard').value='';let h=0;const l=img[g-1].parentElement.offsetTop+(768>innerWidth?33:-1),m=setInterval(()=>{h=scrollY,scrollY<l?scrollTo(0,scrollY+25):(scrollTo(0,l),clearInterval(m)),h===scrollY&&clearInterval(m)},1);break}}};function darkTheme(){root.style.setProperty('--backColor','rgb(42, 44, 51)'),root.style.setProperty('--primaryColor','rgb(35, 35, 35)'),root.style.setProperty('--secondaryColor','rgb(25, 25, 25)'),root.style.setProperty('--thidColor','rgb(20, 20, 20)'),root.style.setProperty('--buttonTextColor','rgb(237, 237, 237)'),root.style.setProperty('--borderColor','var(--buttonTextColor)'),root.style.setProperty('--textColor','rgb(237, 237, 237)'),localStorage.setItem('theme','dark')}function blueTheme(){root.style.setProperty('--backColor','#343e51'),root.style.setProperty('--primaryColor','#242b38'),root.style.setProperty('--secondaryColor','#1a1f29'),root.style.setProperty('--thidColor','#13161d'),root.style.setProperty('--buttonTextColor','white'),root.style.setProperty('--borderColor','white'),root.style.setProperty('--textColor','white'),localStorage.removeItem('theme')}'dark'===localStorage.getItem('theme')?(darkTheme(),cbConfigs[0].checked=!0):(cbConfigs[1].checked=!0,blueTheme());for(let c=0;c<cards.length;c++)cards[c].addEventListener('contextmenu',()=>{let d=prompt('Type Card name below\nE.g: Mini P.E.K.K.A, mini p.e.k.k.a or mini pekka');if(null!==d&&''!==d&&'0'!==d)if(!Number.isInteger(parseInt(d))){d=formatText(d);for(let g=1;g<cardsInformation.length;g++)if(-1===currentDeck.indexOf(g)&&(d===cardsName[g].replace('-',' ').toLowerCase()||d===formatText(cardPtName[g]))){currentDeck[c]=g,setDeck(currentDeck);break}}else d=parseInt(d),-1===currentDeck.indexOf(d)&&0<d&&d<cardsName.length?currentDeck[c]=d:-1===currentDeck.indexOf(cardsCode.indexOf(d))&&(currentDeck[c]=-1===cardsCode.indexOf(d)?currentDeck[c]:cardsCode.indexOf(d)),setDeck(currentDeck)}),cards[c].addEventListener('click',()=>{0===currentDeck[c]?info.innerText='There isn\'t Card selected':showInfo(currentDeck[c])});selectSection.oncontextmenu=c=>{c.preventDefault(),showConfig()},cbConfigs[0].onchange=darkTheme,cbConfigs[1].onchange=blueTheme,idUser.onkeydown=c=>{13===c.which&&showChests()},idUser.onkeyup=()=>{idUser.value=idUser.value.toUpperCase()},idPlayer.onkeydown=c=>{13===c.which&&login()},idPlayer.onkeyup=()=>{idPlayer.value=idPlayer.value.toUpperCase()},null!==localStorage.getItem('id')&&(login(localStorage.getItem('id').toUpperCase()),idPlayer.value=localStorage.getItem('id').toUpperCase()),document.onkeydown=c=>{'block'===dbSection.style.display?66===c.which?buildDeck():83===c.which?saveDeck():c.ctrlKey&&86===c.which&&pasteDeck():'block'===cntConfig.style.display&&27===c.which?showConfig():'100%'===navSection.style.width&&27===c.which?showSections(event):'block'===selectSection.style.display&&c.ctrlKey&&70===c.which&&(c.preventDefault(),toTop(),document.querySelector('#searchCard').select())},selectSection.onclick=()=>{'block'===cntConfig.style.display&&showConfig()};function matche(c=minWidth){c.matches&&('100%'===navSection.style.width&&(0===selectedContainer?dbSection.style.display='block':1===selectedContainer?playerSection.style.display='block':2===selectedContainer?selectSection.style.display='block':3===selectedContainer?savedSection.style.display='block':4===selectedContainer?bestSection.style.display='block':5===selectedContainer?chestSection.style.display='block':6===selectedContainer?configSection.style.display='block':aboutSection.style.display='block'),navSection.style.width='175px',navSection.style.transition='all 0s',navSection.style.height='100%',navSection.style.overflowY='auto',navSection.style.borderRight='1px solid var(--borderColor)')}function matche2(c=maxWidth){c.matches&&(navSection.style.width='40px',navSection.style.height='35px',navSection.style.overflowY='hidden',navSection.style.transition='all .2s',navSection.style.borderRight='none')}window.onload=function(){matche(),minWidth.addListener(matche),matche2(),maxWidth.addListener(matche2),navSection.style.display='block',dbSection.style.display='block',document.querySelector('.lds-ring').style.display='none',location.search.startsWith('?deck=')&&paste(location.search.substring(6,location.search.length))};function showConfig(c){c!==void 0&&c.stopPropagation(),'block'===cntConfig.style.display?(document.querySelector('body').style.overflowY='auto',cntConfig.style.display='none'):(document.querySelector('body').style.overflowY='hidden',cntConfig.style.display='block',scrollTo(0,0))}window.onpopstate=function(){'block'===cntConfig.style.display&&showConfig(),'100%'===navSection.style.width&&(navSection.style.overflowY='hidden',navSection.style.width='40px',navSection.style.height='35px'),switchContainer(cont[history.state])},render(),changeDeck(),setDeck(currentDeck);